package tequila.dao.models;

import de.greenrobot.dao.DaoException;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "TWEET".
 */
public class Tweet {

    private Long id;
    private String message;
    private Integer likeNum;
    private Integer echoNum;
    private java.util.Date createdAt;
    private java.util.Date lastUpdate;
    private Integer userId;
    private Integer channelId;
    private Boolean deleted;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TweetDao myDao;

    private List<TweetLike> likes;
    private List<TweetEcho> echos;

    public Tweet() {
    }

    public Tweet(Long id) {
        this.id = id;
    }

    public Tweet(Long id, String message, Integer likeNum, Integer echoNum, java.util.Date createdAt, java.util.Date lastUpdate, Integer userId, Integer channelId, Boolean deleted) {
        this.id = id;
        this.message = message;
        this.likeNum = likeNum;
        this.echoNum = echoNum;
        this.createdAt = createdAt;
        this.lastUpdate = lastUpdate;
        this.userId = userId;
        this.channelId = channelId;
        this.deleted = deleted;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTweetDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public Integer getLikeNum() {
        return likeNum;
    }

    public void setLikeNum(Integer likeNum) {
        this.likeNum = likeNum;
    }

    public Integer getEchoNum() {
        return echoNum;
    }

    public void setEchoNum(Integer echoNum) {
        this.echoNum = echoNum;
    }

    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    public java.util.Date getLastUpdate() {
        return lastUpdate;
    }

    public void setLastUpdate(java.util.Date lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    public Integer getUserId() {
        return userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public Integer getChannelId() {
        return channelId;
    }

    public void setChannelId(Integer channelId) {
        this.channelId = channelId;
    }

    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TweetLike> getLikes() {
        if (likes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TweetLikeDao targetDao = daoSession.getTweetLikeDao();
            List<TweetLike> likesNew = targetDao._queryTweet_Likes(id);
            synchronized (this) {
                if(likes == null) {
                    likes = likesNew;
                }
            }
        }
        return likes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLikes() {
        likes = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TweetEcho> getEchos() {
        if (echos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TweetEchoDao targetDao = daoSession.getTweetEchoDao();
            List<TweetEcho> echosNew = targetDao._queryTweet_Echos(id);
            synchronized (this) {
                if(echos == null) {
                    echos = echosNew;
                }
            }
        }
        return echos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEchos() {
        echos = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
