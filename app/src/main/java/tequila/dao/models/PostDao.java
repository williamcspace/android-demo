package tequila.dao.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "POST".
*/
public class PostDao extends AbstractDao<Post, Long> {

    public static final String TABLENAME = "POST";

    /**
     * Properties of entity Post.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Summary = new Property(3, String.class, "summary", false, "SUMMARY");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Traffic = new Property(5, Integer.class, "traffic", false, "TRAFFIC");
        public final static Property QuestionId = new Property(6, Integer.class, "questionId", false, "QUESTION_ID");
        public final static Property TitleImg = new Property(7, String.class, "titleImg", false, "TITLE_IMG");
        public final static Property CreatedAt = new Property(8, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property LastUpdate = new Property(9, java.util.Date.class, "lastUpdate", false, "LAST_UPDATE");
        public final static Property Published = new Property(10, Boolean.class, "published", false, "PUBLISHED");
        public final static Property Featured = new Property(11, Boolean.class, "featured", false, "FEATURED");
        public final static Property Deleted = new Property(12, Boolean.class, "deleted", false, "DELETED");
        public final static Property UserId = new Property(13, Integer.class, "userId", false, "USER_ID");
        public final static Property ExpertId = new Property(14, Integer.class, "expertId", false, "EXPERT_ID");
        public final static Property Tags = new Property(15, String.class, "tags", false, "TAGS");
        public final static Property MigrationId = new Property(16, Integer.class, "migrationId", false, "MIGRATION_ID");
        public final static Property AnswerCount = new Property(17, Integer.class, "answerCount", false, "ANSWER_COUNT");
    };


    public PostDao(DaoConfig config) {
        super(config);
    }

    public PostDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"CONTENT\" TEXT," + // 2: content
                "\"SUMMARY\" TEXT," + // 3: summary
                "\"TYPE\" TEXT," + // 4: type
                "\"TRAFFIC\" INTEGER," + // 5: traffic
                "\"QUESTION_ID\" INTEGER," + // 6: questionId
                "\"TITLE_IMG\" TEXT," + // 7: titleImg
                "\"CREATED_AT\" INTEGER," + // 8: createdAt
                "\"LAST_UPDATE\" INTEGER," + // 9: lastUpdate
                "\"PUBLISHED\" INTEGER," + // 10: published
                "\"FEATURED\" INTEGER," + // 11: featured
                "\"DELETED\" INTEGER," + // 12: deleted
                "\"USER_ID\" INTEGER," + // 13: userId
                "\"EXPERT_ID\" INTEGER," + // 14: expertId
                "\"TAGS\" TEXT," + // 15: tags
                "\"MIGRATION_ID\" INTEGER," + // 16: migrationId
                "\"ANSWER_COUNT\" INTEGER);"); // 17: answerCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Post entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }

        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(4, summary);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }

        Integer traffic = entity.getTraffic();
        if (traffic != null) {
            stmt.bindLong(6, traffic);
        }

        Integer questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(7, questionId);
        }

        String titleImg = entity.getTitleImg();
        if (titleImg != null) {
            stmt.bindString(8, titleImg);
        }

        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(9, createdAt.getTime());
        }

        java.util.Date lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindLong(10, lastUpdate.getTime());
        }

        Boolean published = entity.getPublished();
        if (published != null) {
            stmt.bindLong(11, published ? 1L: 0L);
        }

        Boolean featured = entity.getFeatured();
        if (featured != null) {
            stmt.bindLong(12, featured ? 1L: 0L);
        }

        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(13, deleted ? 1L: 0L);
        }

        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(14, userId);
        }

        Integer expertId = entity.getExpertId();
        if (expertId != null) {
            stmt.bindLong(15, expertId);
        }

        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(16, tags);
        }

        Integer migrationId = entity.getMigrationId();
        if (migrationId != null) {
            stmt.bindLong(17, migrationId);
        }

        Integer answerCount = entity.getAnswerCount();
        if (answerCount != null) {
            stmt.bindLong(18, answerCount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Post readEntity(Cursor cursor, int offset) {
        Post entity = new Post( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // summary
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // traffic
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // questionId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // titleImg
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // createdAt
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // lastUpdate
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // published
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // featured
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // deleted
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // userId
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // expertId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // tags
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // migrationId
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17) // answerCount
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Post entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSummary(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTraffic(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setQuestionId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTitleImg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreatedAt(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setLastUpdate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setPublished(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setFeatured(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setDeleted(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setUserId(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setExpertId(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setTags(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMigrationId(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setAnswerCount(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Post entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Post entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
