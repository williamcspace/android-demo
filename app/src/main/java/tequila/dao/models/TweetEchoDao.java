package tequila.dao.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TWEET_ECHO".
*/
public class TweetEchoDao extends AbstractDao<TweetEcho, Long> {

    public static final String TABLENAME = "TWEET_ECHO";

    /**
     * Properties of entity TweetEcho.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Cancelled = new Property(2, Boolean.class, "cancelled", false, "CANCELLED");
        public final static Property CreatedAt = new Property(3, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property TweetId = new Property(4, long.class, "tweetId", false, "TWEET_ID");
    };

    private Query<TweetEcho> tweet_EchosQuery;

    public TweetEchoDao(DaoConfig config) {
        super(config);
    }

    public TweetEchoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TWEET_ECHO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"CANCELLED\" INTEGER," + // 2: cancelled
                "\"CREATED_AT\" INTEGER," + // 3: createdAt
                "\"TWEET_ID\" INTEGER NOT NULL );"); // 4: tweetId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TWEET_ECHO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TweetEcho entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }

        Boolean cancelled = entity.getCancelled();
        if (cancelled != null) {
            stmt.bindLong(3, cancelled ? 1L: 0L);
        }

        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(4, createdAt.getTime());
        }
        stmt.bindLong(5, entity.getTweetId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public TweetEcho readEntity(Cursor cursor, int offset) {
        TweetEcho entity = new TweetEcho( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // cancelled
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // createdAt
            cursor.getLong(offset + 4) // tweetId
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TweetEcho entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCancelled(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setCreatedAt(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setTweetId(cursor.getLong(offset + 4));
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TweetEcho entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(TweetEcho entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /** Internal query to resolve the "echos" to-many relationship of Tweet. */
    public List<TweetEcho> _queryTweet_Echos(long tweetId) {
        synchronized (this) {
            if (tweet_EchosQuery == null) {
                QueryBuilder<TweetEcho> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TweetId.eq(null));
                tweet_EchosQuery = queryBuilder.build();
            }
        }
        Query<TweetEcho> query = tweet_EchosQuery.forCurrentThread();
        query.setParameter(0, tweetId);
        return query.list();
    }

}
