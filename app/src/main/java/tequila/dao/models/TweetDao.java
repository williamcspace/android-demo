package tequila.dao.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TWEET".
*/
public class TweetDao extends AbstractDao<Tweet, Long> {

    public static final String TABLENAME = "TWEET";

    /**
     * Properties of entity Tweet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Message = new Property(1, String.class, "message", false, "MESSAGE");
        public final static Property LikeNum = new Property(2, Integer.class, "likeNum", false, "LIKE_NUM");
        public final static Property EchoNum = new Property(3, Integer.class, "echoNum", false, "ECHO_NUM");
        public final static Property CreatedAt = new Property(4, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property LastUpdate = new Property(5, java.util.Date.class, "lastUpdate", false, "LAST_UPDATE");
        public final static Property UserId = new Property(6, Integer.class, "userId", false, "USER_ID");
        public final static Property ChannelId = new Property(7, Integer.class, "channelId", false, "CHANNEL_ID");
        public final static Property Deleted = new Property(8, Boolean.class, "deleted", false, "DELETED");
    };

    private DaoSession daoSession;


    public TweetDao(DaoConfig config) {
        super(config);
    }

    public TweetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TWEET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MESSAGE\" TEXT," + // 1: message
                "\"LIKE_NUM\" INTEGER," + // 2: likeNum
                "\"ECHO_NUM\" INTEGER," + // 3: echoNum
                "\"CREATED_AT\" INTEGER," + // 4: createdAt
                "\"LAST_UPDATE\" INTEGER," + // 5: lastUpdate
                "\"USER_ID\" INTEGER," + // 6: userId
                "\"CHANNEL_ID\" INTEGER," + // 7: channelId
                "\"DELETED\" INTEGER);"); // 8: deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TWEET\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Tweet entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(2, message);
        }

        Integer likeNum = entity.getLikeNum();
        if (likeNum != null) {
            stmt.bindLong(3, likeNum);
        }

        Integer echoNum = entity.getEchoNum();
        if (echoNum != null) {
            stmt.bindLong(4, echoNum);
        }

        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(5, createdAt.getTime());
        }

        java.util.Date lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindLong(6, lastUpdate.getTime());
        }

        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(7, userId);
        }

        Integer channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindLong(8, channelId);
        }

        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(9, deleted ? 1L: 0L);
        }
    }

    @Override
    protected void attachEntity(Tweet entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Tweet readEntity(Cursor cursor, int offset) {
        Tweet entity = new Tweet( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // message
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // likeNum
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // echoNum
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // createdAt
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // lastUpdate
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // userId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // channelId
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // deleted
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Tweet entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLikeNum(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEchoNum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCreatedAt(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setLastUpdate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setChannelId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDeleted(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Tweet entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Tweet entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
